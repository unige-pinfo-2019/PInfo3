version: "3.5"

services:

  #Zookeeper service provides distributed configuration management to Kafka
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend-network
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./target/zk-single-kafka-single/zoo1/data:/data
      - ./target/zk-single-kafka-single/zoo1/datalog:/datalog

  #   kafka is the messaging backbone of the micro-service architecture. The objective is avoid point 2 point connections.
  kafka:
    image: confluentinc/cp-kafka:5.1.0
    container_name: kafka
    hostname: kafka
    networks:
      - backend-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - ./target/zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # classads service is for posting a classified ad
  classads-database:
    image: postgres:10
    container_name: classads-database
    hostname: classads-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: ad
      POSTGRES_PASSWORD: ad
      POSTGRES_DB: classadsdb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ad", "-d", "classadsdb"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-ad:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  classads-service:
    container_name: classads-service
    image: 2019pinfo3/classads-service:latest
    hostname: classads-service

    networks:
      - backend-network
    ports:
      - "8081:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSDS_CONNECTION_DASH_URL: "jdbc:postgresql://classads-database:5432/classadsdb"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSDS_USER_DASH_NAME: 'ad'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSDS_PASSWORD: 'ad'
    depends_on:
      - classads-database



# classads response service
  classadsresponse-database:
    image: postgres:10
    container_name: classadsresponse-database
    hostname: classadsresponse-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: adr
      POSTGRES_PASSWORD: adr
      POSTGRES_DB: classadsresponsedb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "adr", "-d", "classadsresponsedb"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-adr:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

      

  classadsresponse-service:
    container_name: classadsresponse-service
    image: 2019pinfo3/classadsresponse-service:latest
    hostname: classadsresponse-service

    networks:
      - backend-network
    ports:
      - "8085:8080"
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSRESPONSEDS_CONNECTION_DASH_URL: "jdbc:postgresql://classadsresponse-database:5432/classadsresponsedb"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSRESPONSEDS_DRIVER_DASH_NAME: 'postgresql'   
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSRESPONSEDS_USER_DASH_NAME: 'adr'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_CLASSADSRESPONSEDS_PASSWORD: 'adr'
    depends_on:
      - classadsresponse-database
    


  # user service is for logging in users

  users-database:
    image: postgres:10
    container_name: users-database
    hostname: users-database
    networks:
     - backend-network
    environment:
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
      POSTGRES_DB: usersdb
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "us", "-d", "usersdb"]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - pgdata-us:/var/lib/postgresql/data
    restart: on-failure
    stdin_open: true
    tty: true

  user-service:
    container_name: user-service
    image: 2019pinfo3/user-service:latest
    hostname: user-service
    networks:
      - backend-network
    ports:
      - "8082:8080"
    environment:
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERSDS_CONNECTION_DASH_URL: "jdbc:postgresql://users-database:5432/usersdb"
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERSDS_DRIVER_DASH_NAME: 'postgresql'   
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERSDS_USER_DASH_NAME: 'us'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_USERSDS_PASSWORD: 'us'
    depends_on:
      - users-database

  # search service is for getting ads back corresponding to a request
  search-service:
    container_name: search-service
    image: 2019pinfo3/search-service:latest
    hostname: search-service
    environment:
      THORNTAIL_KAFKA_DASH_CONFIGURATION_HOST: "kafka"
      THORNTAIL_KAFKA_DASH_CONFIGURATION_PORT: "9092"
    networks:
      - backend-network
    ports:
      - "8084:8080"

  # web-ui is the UI through which the user interacts with the services
  web-ui:
    container_name: web-ui
    image: 2019pinfo3/web-ui:latest
    hostname: web-ui
    networks:
      - frontend-network
    ports:
      - "8083:80"
    depends_on:
       - classads-service
       - user-service

volumes:
  pgdata-ad:
  pgdata-adr:
  pgdata-us:

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
