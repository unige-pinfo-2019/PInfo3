{"remainingRequest":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/gibran/Documents/projetInfo/PInfo3/web-ui/src/components/TreeMenu.vue?vue&type=style&index=0&id=c6ad92fa&lang=scss&scoped=true&","dependencies":[{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/src/components/TreeMenu.vue","mtime":1558039769625},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gibran/Documents/projetInfo/PInfo3/web-ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.label:hover {\n  color: $primary-color;\n  cursor: pointer;\n}\n\n",{"version":3,"sources":["TreeMenu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA","file":"TreeMenu.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"TreeMenu\">\n    <div class=\"label-wrapper\" @click=\"toggleChildren(label)\">\n      <div class=\"label\" :style=\"indent\">\n        {{ label }}\n      </div>\n\n    </div>\n    <TreeMenu\n      v-if=\"showChildren\"\n      v-for=\"node in nodes\"\n      :nodes=\"node.children\"\n      :label=\"node.name\"\n      :depth=\"depth + 1\"    >\n  </TreeMenu>\n\n  </div>\n</template>\n\n\n<style lang=\"scss\" scoped>\n\n.label:hover {\n  color: $primary-color;\n  cursor: pointer;\n}\n\n</style>\n\n\n<script>\n  import axios from 'axios';\n\n  export default {\n    name: 'TreeMenu',\n    props: [ 'nodes', 'label', 'depth','ids'],\n    data() {\n       return {\n         showChildren: false,\n       }\n    },\n    computed: {\n    indent() {\n      return { transform: `translate(${this.depth * 25}px)` }\n    }\n  },\n\n  methods: {\n    toggleChildren(label) {\n       this.showChildren = !this.showChildren;\n       // retrieve category id\n       this.$router.push({ name: 'category', params: { id: this.ids.data[label].toString() }})\n    }\n  }\n}\n</script>\n"]}]}